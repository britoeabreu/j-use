model AgileQube
 
-- classes

class Artifact
attributes
  name: String
end

class Case
attributes
  name: String
  priority: Integer
  status: String
end

class Delivery
attributes
  description: String
  date: Integer
end

class DeliveryInterval
attributes
  duration: Integer 
end

class Iteration
	attributes
	  name: String
	  goal: String
	  startDate: Integer
	  endDate: Integer
	  status: String
	  
	operations
		lowerPriorityTaskExecutedFirst(): Boolean =
			let highestPriorTodoTask: Integer = self.tasks->select(status = 'todo').priority->max
			in
				self.tasks -> exists(t: Task| t.status = 'doing' and t.priority > highestPriorTodoTask)

		pre PreConditions:
			self.tasks->notEmpty() and
			self.status.isDefined()

		pre IsApplicable:
			self.status = 'open' and
			self.tasks->exists(t: Task | t.status = 'todo' and t.priority.isDefined()) and
			self.tasks->exists(t: Task | t.status = 'doing' and t.priority.isDefined())

end

class IterationInterval
attributes
  duration: Integer 
end

class Project
attributes
  name: String
  goal: String
  duration: Integer
  status: String
end

class Task
	attributes
	  name: String
	  duration: Integer
	  creationDate: Integer
	  startDate: Integer
	  endDate: Integer
	  priority: Integer
	  status: String
end
 
class Worker
attributes
  name: String
end

class ArtifactDef
attributes
  name: String
end

class TaskDef
attributes
  name: String
end

class Role
attributes
  name: String
end

class Process
attributes
  name: String
end
 
-- associations

association projectHasCases between
  Project[1]
  Case[*] role cases
end

association projectHasTasks between
  Project[1]
  Task[*] role tasks
end

association projectHasDeliveries between
  Project[1]
  Delivery[*] role deliveries
end

association projectHasDeliveryIntervals between
  Project[1]
  DeliveryInterval[*] role deliveryIntervals
end

association projectHasIterations between
  Project[1]
  Iteration[*] role iterations
end

association projectHasIterationIntervals between
  Project[1]
  IterationInterval[*] role iterationIntervals
end

association projectHasWorkers between
  Project[*]
  Worker[*] role workers
end
 
association caseHasTasks between
  Case[0..1]
  Task[*] role tasks
end


association artifactHasTasks between
  Artifact[*]
  Task[*] role tasks
end

association workerHasTasks between
  Worker[0..1]
  Task[*]
end

association iterationHasTasks between
  Iteration[0..1]
  Task[*] role tasks
end

association previousDelivery between
  DeliveryInterval[0..1] role deliveryPrevious
  Delivery[1] role previous
end

association nextDelivery between
  DeliveryInterval[0..1] role deliveryNext
  Delivery[1] role next
end

association previousIteration between
  IterationInterval[0..1] role intervalPrevious
  Iteration[1] role previous
end

association nextIteration between
  IterationInterval[0..1] role intervalNext
  Iteration[1] role next
end

association iterationHasADelivery between
  Iteration[1]
  Delivery[0..1]
end

association artifactCanHaveAnArtifactDef between
  ArtifactDef[0..1]
  Artifact[*] role artifacts
end

association taskCanHaveATaskDef between
  TaskDef[0..1]
  Task[*] role tasks
end

association workerHasRoles between
  Worker[*] role workers
  Role[*] role roles
end

association processHasArtifactDefs between
  Process[1]
  ArtifactDef[*] role artifactDefs
end

association processHasTaskDefs between
  Process[1]
  TaskDef[1..*] role taskDefs
end

association processHasRoles between
  Process[1]
  Role[*] role roles
end


-- OCL constraints
 
constraints

context Task
    -- tasks in a case must also be in the project
  inv TasksAndCaseSameProject:
	self.case.isDefined() implies self.case.project = self.project

    -- tasks in an iteration must also be in the project
  inv TasksAndIterationSameProject:
	self.iteration.isDefined() implies self.iteration.project = self.project
	
  inv TaskWorkerWorksInProject:
	self.worker.isDefined() implies self.project.workers->includes(self.worker)
	

context Iteration

  inv IterationAndDeliverySameProject:
	self.delivery.isDefined() implies self.delivery.project = self.project
	
  inv IterationAndIterationIntervalPreviousSameProject:
	self.intervalPrevious.isDefined() implies self.intervalPrevious.project = self.project
	
  inv IterationAndIterationIntervalNextSameProject:
	self.intervalNext.isDefined() implies self.intervalNext.project = self.project


context Delivery

  inv DeliveryAndDeliveryPreviousSameProject:
	self.deliveryPrevious.isDefined() implies self.deliveryPrevious.project = self.project
	
  inv DeliveryAndDeliveryNextSameProject:
	self.deliveryNext.isDefined() implies self.deliveryNext.project = self.project
	
	
context Project 
/*
    -- the number of tasks in a project must
    -- be greater or equal to the number of iterations
  inv MoreTasksThanIterations:
    self.task->size >= self.iteration->size 
*/

    -- number of delivery intervals must be always lower than the number of deliveries
  inv MoreDeliveriesThanDeliveryIntervals:
    self.deliveryIntervals->notEmpty() implies self.deliveryIntervals->size < self.deliveries->size 

    -- number of iteration intervals must be always lower than the number of iterations
  inv MoreIterationsThanIterationIntervals:
    self.iterationIntervals->notEmpty() implies self.iterationIntervals->size < self.iterations->size 
---
